import { Component, ElementRef, Inject, ViewChild } from '@angular/core';
import { GenericService } from '../../service/genericservice.service';
import {
  MAT_DIALOG_DATA,
  MatDialogModule,
  MatDialogRef,
} from '@angular/material/dialog';
import {
  MatAutocompleteModule,
  MatAutocompleteSelectedEvent,
} from '@angular/material/autocomplete';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatOptionModule } from '@angular/material/core';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { NotificationService } from '../../service/notification.service';

@Component({
  selector: 'app-myquartier',
  standalone: true,
  imports: [
    MatCardModule,
    MatFormFieldModule,
    FormsModule,
    CommonModule,
    MatOptionModule,
    MatSelectModule,
    MatButtonModule,
    MatIconModule,
    MatDialogModule,
    MatInputModule,
    MatAutocompleteModule,
  ],
  templateUrl: './edit-quartier.component.html',
  styleUrl: './edit-quartier.component.css',
})
export class EditQuartierComponent {
  myquartier: any;

  quartiersList: any[] = [];
  filteredQuartier: any[] = [];
  selectedQuartier!: any;
  selectedQuartierName!: string;

  @ViewChild('quartierInput') quartierInput!: ElementRef<HTMLInputElement>;

  constructor(
    public dialogRef: MatDialogRef<EditQuartierComponent>,
    private genericService: GenericService,
    private notificationService: NotificationService,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {}

  async ngOnInit() {
    console.log(this.data);
    this.quartiersList = await this.genericService.get('quartiers');
  }

  onCancel(): void {
    this.dialogRef.close();
  }

  async onSave() {
  const selected = this.selectedQuartier;

  if (!selected || selected.quartier_id === undefined) {
    this.notificationService.showError('Aucun quartier sélectionné.');
    return;
  }

  const data = {
    usr_id: Number(localStorage.getItem('iduser')),
    quartier_id: selected.quartier_id,
  };

  try {
    const response = await this.genericService.post('my-quartier', data);

    if (response?.success) {
      this.notificationService.showSuccess('Votre quartier a bien été défini');
      this.dialogRef.close();
      window.location.reload();
    } else {
      this.notificationService.showError(
        response?.error ?? 'Erreur lors de la définition du quartier'
      );
      this.dialogRef.close();
    }
  } catch (error) {
    console.error('Erreur lors du post vers my-quartier :', error);
    this.notificationService.showError('Échec de l’enregistrement du quartier');
  }



  onQuartierSelected(event: MatAutocompleteSelectedEvent): void {
    this.selectedQuartier = event.option.value;
  }

  filterQuartier() {
    const filterValue = this.quartierInput.nativeElement.value.toLowerCase();
    this.filteredQuartier = this.quartiersList.filter(
      (item: { quartier_libelle: string }) =>
        item.quartier_libelle.toLowerCase().includes(filterValue)
    );
  }

  displayQuartier(quartier: any): string {
    return quartier ? quartier.quartier_libelle : ''; // Adjust based on the structure of the axe object
  }

  closeDialog(): void {
    this.dialogRef.close();
  }
}
